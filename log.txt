jpa는 자바 표준, 스프링 내에서는 스프링 표준 사용


1. 회원 도메인 / 리포지 / 서비스 생성

2. 주문/할인
#주문도메인 생성
#주문서비스의 객체는 order로
#주문서비스 구현
- 서비스에서 사용할 리파지 주입, 주문서비스에 도입될 할인정책 주입
- 반환 order는 위에 생성한 dicount 정보를 포함해서

3. 주문/할인 앱 테스트

4. DI되지않은 문제점 : OrderService orderService = new OrderServiceImpl();
#DIP(구현 의존x) OCP(수정x 확장) 위반
- orderserviceimpl은 클라이언트 서비스인데 코드를 수정해야만 한다 > 구현클래스에 의존 - DIP위반, 소스코드 변경 - OCP 위반
- 추상 객체만 주입받아야 하므로 빈을 사용한다
#appconfig에 서비스 등록 - 관심사의 분리 : 생성,연결과 실행을 분리
- appconfig에 서비스 메소드 생성 > 서비스구현체의 생성자 gene > 메인에서 config.service() 요청 > 구현객체

5. 리팩토링
#테스트코드 변경, appconfig 중복제거
- 중복제거로 역할과 구현이 가독성(new memorymemberrepository가 두 서비스에 포함되어 이를 memberrepository 메소드로 분리)

6. 스프링의 시작 : 컨테이너도입
#Appconfig 교체 및 컨테이너 생성(ac)
- appconfig 객체를 매번 생성하지 않고 컨테이너에 bean으로 등록해 객체를 관리
- ApplicationContext를 어노테이션구현체로 생성하고 인자로 appconfig.class를 넣는다
- AppContext == 스프링 컨테이너 1_생성 컨테이너에 저장될때 빈 이름 : 메소드명(default) / 빈 객체 : 반환 구현체
2_의존관계 주입(이 처리가 한번에 이뤄지는 것 같지만 엄연히 구분됨)
- applicationcontext의 경우 들어가는 인자클래스에 @component를 하지 않아도 자동으로 인식
- ac는 인자로 설정객체도 인터페이스도 구현객체도 모두 받을 수 있다.(컨테이너 생성시 싱글톤 생성자의 경우 초기화까지 일괄 처리)
- beanfactory를 부모로 둠

7. 싱글톤
#객체 생성 막기
- 클래스 내에서 스태틱으로 하나 생성하고 생성자에 private을 걸어버리면됨
- 이러면 클래스만 접근 가능하고 객체는 생성금지에 get을 통한 접근만 허용
- 코드길어지고 구현에 의존하여 DIP/OCP위반, 테스트가 어렵다.
# 싱글톤 컨테이너와 주의점
- 빈스코프로 싱글톤이 아닌 다른 방식으로도 컨테이너 사용 가능
- 만드시 stateless하게! > 절대 의존적인 필드를 넣지 말 것(클라이언트가 값을 공유해선 안됨)
# BeanDefinition
- 스프링 역시 자바코드,xml 여부를 알 필요 없이 추상,구현을 분리하여 BeanDefinition(추상)만 알면 된다

8. Appconfig
#중복 제거
- @Configuration : 스프링이 appconfig를 상속하는 클래스(바이트코드 조작 라이브러리 CGLBI 사용)를 생성해서 빈으로 등록
- @C없이 @Bean만 사용하면 중복 객체 생성으로 싱글톤이 깨진다(바이트코드를 조작하여 이미 생성되있으면 그걸 반환)
- @Bean으로 빈등록 > @Config로 싱글톤 관리
- 설정정보에 등록해주기 번거로울때 @autowired 사용(component scan)
- 빈 등록시 메소드로 등록(타입 메소드 호출시 구현 객체 리턴)

9. @autowired
# @ComponentScan
- @Config는 필터로 제외해야함. AppConfig와 다르게 의존관계 주입이 없다( Service(new Reposit...))
- @Component로 target class > 생성자 위에 @Autowired로 Auto DI
#순서
- @component:빈이름(member~)/빈객체(Member~)등록 > @autowired:부모인자타입을 보고 등록된 구현체를 주입함

10. @ComponentScan +
#basicpackage는 둘 이상 지정 가능, bpclass는 해당 스캔클래스의 패키지부터 시작(없으면 이 값이 default)
- @SpringBootApp은 @ComponentScan을 기본적으로 포함, 애노테이션은 상속이 없고 스프링이 (component-contoller...)규칙을 제공
#filter
- includeFilters는 해당 옵션 포함, FilterType은 default가 어노테이션, include는 기본값이기에 exclude만 간혹 사용
#Bean중복
- 기본적으로 추상타입이 같으면 구현체가 중복될 경우 NoUnique Exception
- 자동vs자동 : 이름이 같은경우 Exception
- 수동vs자동 : 수동이 piriorty win > override
- 단, 최근은 main 실행시 중복 죄다 오류로 팅김(property 수정 가능)

11. DI
#생성자 주입
- Default, 스프링빈일 경우 생략 가능, 불변/필수, 빈 생성시 DI가 같이 이루어짐
- 생성시 1 주입받을 빈을 private final로 선언 2 생성자에 대한 코드 생성
#수정자 주입
- 2순위, 수정/선택, 필수가 아님(property 수정 가능)
#필드 주입
- 지양, 코드가독성 but 스프링없이는 아무 기능이 없고 더미 객체를 생성하는 테스트코드를 작성 불가
- 특정 테스트코드나, 설정에만 사용하는걸 권장

12. 빈 중복
#기본 : 타입이 중복되면 필드명으로 매칭(Discount rateDiscount처럼 필드명 변경)
# @Qualifier : @Qualifier("main") Discount discount, 순회 후 빈이름으로도 매칭되는 시ㅡ템
# @Primary : 1순위, 구현체위에 @Primary
# 직접 만들기 : Qualifier처럼 쓸 수 있으나 코드 커스텀이 많아짐

13. 실무 팁
#Bean을 조회할 일이 생기면(할인을 정가, 정률 중 선택) Map,List를 통해 타입으로 조회 가능(getBean의 경우 중복으로 exception)
#autoconfig, manualconfig 둘 중 보통은 autoconfig
#다형성을 적극활용시 코드가독성이 안좋아지므로 manual을 쓰거나 패키지 분류를 잘해놓기

14. lifecycle
#바닐라
- ConfigurableApplicationContext는 끝에 닫아주는 과정이 필요하면 타입으로 씀
- lifecycle에선 외부에서 값을 주입해 준 뒤에 콜백이 시작되는게 일반적
- networkclient 생성시에는 url = null > 생성 이후 seturl (객체 생성 > DI > 콜백이 이뤄져야하는데 생성 > 콜백 > DI가됨)
#intializing ,disposableBean 인터페이스
- 메소드를 통해 주입 후 콜백, 빈이 스프링 코드에만 의존, 코드 수정이 불가피해서(implement불가) 외부 라이브러리에 적용 불가
#initmethod
- @bean에 init, destroy로 메소드명 코딩시 원하는 메소드명 사용 가능
- 빈의 의존성 down, 코드수정이 아닌 설정정보 사용으로 외부 라이브러리 적용 가능(외부 라이브러리에 쓰인 메소드를 등록만 하면됨)
- destroy는 라이브러리에서 주로 사용되는 close, shutdown을 추론해서 사용하여 설정시 생략 가능(공백 지정으로 추론 금지 가능)
# @PostConstruct @PreDestroy
- 메소드 위에 해당 어노테이션을 붙이면 끝, javax 패키지 > 자바 표준 = 다른 컨테이너 사용 가능
- 컴포넌트 스캔과 잘 어울리며 단점인 외부 라이브러리 사용불가는 위의 @Bean 사용으로 대체

15. Bean Scope : prototype
#자동등록은 @componet위에, 수동등록은 @Bean위에 @Scope("")
#prototype
- 객체 생성, DI > 클라이언트에 반환 / 관리 x (관리는 client일임)
- 싱글톤빈은 컨테이너 생성시 초기화까지 이뤄지는데 반해 빈 생성과 초기화가 매번 일어난다.
#prototype Bean in singleton Bean
- 싱글톤 빈이 생성될 때 프로토타입 빈이 동시에 주입되고 이후 생성 로직이 없으므로 클라이언트는 같은 프로토타입 빈을 공유
- 주입이 아닌 필요한 의존관계를 찾는것을 DL(의존 탐색)
- ac 전체를 의존하는 코드가 아닌(단위 테스트가 어려움) DL기능만 수행하는
#ObjectProvider
- ObjectFactory+편의기능 상속, 컨테이너를 호출할 필요 없이 중간에 provider를 통해 빈을 조회 후 반환(없기때문에 생성 후 반환), 스프링 의존
- ObjectProvider<PrototypeBean> prov; prov.getObject()으로 빈 조회
#JSR-330 Provider
- 자바 표준, 그래들에 추가해줘야함
- Provider<PrototypeBean> prov; prov.get()으로 단순화
#Prototype의 사용처(일반적으로 싱글톤으로 모두 해결)
- Provider의 경우 DL이 필요할때도 씀 : 순환참조(서로 의존)가 일어날때, 지연 객체 반환

16. Bean Scope : Web Scope
#컨테이너가 종료시점까지 관리
#request, session, application(서블릿컨텍스트와 동일 주기), websocket 등
#request
-http의 요청응답 사이클 관리
-web-starter 의존성을 받으면 내장 톰캣 서버를 통해 웹서버와 스프링을 동시에 실행(웹라이브러리가 추가되면 ac기반이 아닌 webserverac기반으로 앱 구동)
-주로 개개인의 로그를 남길때 씀
-컨트롤러에 객체 저장 등 관리와 관련된 기능은 지양(예제기에 컨트롤러에 코딩)
-서비스 계층에 인자를 넘기지 않기 위해 MyLogger에 정보 저장
-처음작성 : 스프링이 뜰때 DI를 하려고하면 MyLogger는 http요청시에만 생성되므로 작동하지 않는게 정상
#Provider
-MyLogger 대신 이를 필요할때 DI받는(필요할때 http요청이 온 걸 상정) provider로 교체
-스프링 시작시점이 아닌 빈을 호출하는 시점까지 컨테이너에 생성 요청을 지연시키는게 가능
#Proxy
-처음작성한 MyLogger위에 Proxy filter를 추가하면 끝
 -실제 주입 전까지 가짜 객체를 컨테이너에 넘겨줬다가(DI도 가짜가 됨) 실제 요청이 오면 그때 진짜 객체를 넘겨줌(가짜 객체에 위임 로직이 포함됨)
-멤버 메서드가 호출되면 가짜 객체가 진짜 메서드를 가져와서 넘겨줌, request scope가 아니어도 동작하는 가짜이며 요청 전까지 싱글톤처럼 행동
-코드를 고칠 필요가 없는 Proxy는 다형성의 예시, 싱글톤과 비슷하지만 다르게 동작하는걸 기억, scope는 꼭 필요할때만 사용해야 코드가 정돈
